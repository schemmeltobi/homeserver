networks:
  proxy:
    enable_ipv6: true
    name: proxy
  authelia:
    name: authelia

services:
  traefik:
    image: traefik:v3.3.1
    container_name: traefik
    networks:
      proxy:
        aliases:
          - 'auth.${INTERNAL_DOMAIN}'
      authelia: {}
    restart: unless-stopped
    ports:
      - 443:443
      - 80:80
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../data/traefik/letsencrypt:/letsencrypt
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=HostRegexp(`^traefik\.(${INTERNAL_DOMAIN}|${PUBLIC_DOMAIN})$`)
      - traefik.http.routers.api.entryPoints=websecure
      - traefik.http.routers.api.service=api@internal
      #- traefik.http.routers.api.middlewares=authelia@docker
    environment:
      - PORKBUN_SECRET_API_KEY=${PORKBUN_SECRET_API_KEY}
      - PORKBUN_API_KEY=${PORKBUN_API_KEY}
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --log.level=DEBUG
      - --api.dashboard=true
      # Certificate Resolver 
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=porkbun
      - --certificatesresolvers.letsencrypt.acme.email=mail@mail.com
      # LetsEncrypt Staging server (used for testing)
      #- --certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      #- --certificatesresolvers.letsencrypt.acme.dnschallenge.propagation.disableChecks=true
      # LetsEncrypt Production server
      - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json

      # HTTP redirect to HTTPS
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entryPoints.web.http.redirections.entrypoint.scheme=https
      # HTTPS Entrypoint
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=${INTERNAL_DOMAIN}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${INTERNAL_DOMAIN}
      - --entrypoints.websecure.http.tls.domains[1].main=${PUBLIC_DOMAIN}
      - --entrypoints.websecure.http.tls.domains[1].sans=*.${PUBLIC_DOMAIN}

      ### Immich config
      - --entryPoints.websecure.transport.respondingTimeouts.readTimeout=600s
      - --entryPoints.websecure.transport.respondingTimeouts.idleTimeout=600s
      - --entryPoints.websecure.transport.respondingTimeouts.writeTimeout=600s


  jellyfin:
    container_name: jellyfin
    image: jellyfin/jellyfin:latest
    networks:
      - proxy
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=HostRegexp(`^jellyfin\.(${INTERNAL_DOMAIN}|${PUBLIC_DOMAIN})$`)
      - traefik.http.routers.jellyfin.entryPoints=websecure
    volumes:
      - ../data/jellyfin:/config
      - /mnt/intenso/movies:/movies
      - /mnt/intenso/shows:/tv


  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    container_name: whoami
    restart: unless-stopped
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.rule=HostRegexp(`^whoami\.(${INTERNAL_DOMAIN}|${PUBLIC_DOMAIN})$`)
      - traefik.http.routers.whoami.entryPoints=websecure
  
# db:
#   image: postgres:17-alpine
#   restart: always
#   shm_size: 128mb
#   volumes:
#     - ../data/postgres/:/docker-entrypoint-initdb.d
#   ports:
#     - 5432:5432